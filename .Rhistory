print(imputed[i,])
dist = large; ind = 1; imputed[i,1]=default;
print(imputed[i,])
#for (j in 1:nrow(imputed)) {
#  if (runif(1) < .0000001) {
#  thisdist = distance(original, i, j)
# if (dist > thisdist) {
#    dist = thisdist;
#    ind = j;
#  imputed[i,1] = original[j,1]
#   }
}
}
}
eval(parse(text=reportNAcount("imputed", "steps")))
impute_hotdeck()
impute_hotdeck()
eval(parse(text=reportNAcount("imputed", "steps")))
original <- dataset
imputed   <- dataset #will be modified
large = 100000
distance = function(tbl, i, j) {
if ((i == j) | is.na(tbl[j,1])) {
large;
} else {
dist = abs(floor(tbl[i,3]/100) * 60 + tbl[i,3] %% 100 -
floor(tbl[j,3]/100) * 60 + tbl[j,3] %% 100);
if (tbl[i,2] != tbl[j,2]) {
dist = dist + 120;
}
dist
}
}
default = sqldf("select avg(steps) from dataset"); ind=0
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = 1; imputed[i,1]=default;
print(imputed[i,])
for (j in 1:nrow(imputed)) {
if (runif(1) < .0001) {
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
imputed[i,1] = original[j,1]
print(i)
print(j)
}
}
}
}
}
original <- dataset
imputed   <- dataset #will be modified
large = 100000
distance = function(tbl, i, j) {
if ((i == j) | is.na(tbl[j,1])) {
large;
} else {
dist = abs(floor(tbl[i,3]/100) * 60 + tbl[i,3] %% 100 -
floor(tbl[j,3]/100) * 60 + tbl[j,3] %% 100);
if (tbl[i,2] != tbl[j,2]) {
dist = dist + 120;
}
dist
}
}
default = sqldf("select avg(steps) from dataset"); ind=0
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = 1; imputed[i,1]=default;
for (j in 1:nrow(imputed)) {
if (runif(1) < .0001) {
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
imputed[i,1] = original[j,1]
print(i)
print(j)
print(imputed[i,])
}
}
}
}
}
original <- dataset
if (file.exists("./ImputedData.csv")) {
imputed <- read.table("./ImputedData.csv")
} else {
imputed   <- dataset #will be modified
default = sqldf("select avg(steps) from dataset"); ind=0
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = 1; imputed[i,1]=default;
for (j in 1:nrow(imputed)) {
if (runif(1) < .0001) {
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
imputed[i,1] = original[j,1]
}
}
}
}
}
write.table(dataset, "./ImputedData.csv")
}
r eval(parse(text=reportNAcount("imputed", "steps")))
eval(parse(text=reportNAcount("imputed", "steps")))
original <- dataset
if (file.exists("./ImputedData.csv")) {
imputed <- read.table("./ImputedData.csv")
} else {
imputed   <- dataset #will be modified
default = sqldf("select avg(steps) from dataset"); ind=0
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = 1; imputed[i,1]=default;
for (j in 1:nrow(imputed)) {
if (runif(1) < .0001) {
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
imputed[i,1] = original[j,1]
}
}
}
}
}
write.table(dataset, "./ImputedData.csv")
}
write.table(imputed, "./ImputedData.csv")
eval(parse(text=reportNAcount("imputed", "steps")))
date("2012-10-01")
date()
weekdays(as.Date("2012-10-01"))
weekdays(as.Date("2015-05-09"))
is.weekend = function(yyyy_mm_dd) {
day <- weekdays(as.Date("yyyy_mm_dd"))
if ((day == "Saturday") || (day == "Saturday")) {
"Weekend"
} else {
"weekday"
}
}
is.weekend("2015-05-09")
is.weekend = function(yyyy_mm_dd) {
day <- weekdays(as.Date(yyyy_mm_dd))
if ((day == "Saturday") || (day == "Saturday")) {
"Weekend"
} else {
"weekday"
}
}
is.weekend("2015-05-09")
is.weekend("2015-05-07")
is.weekend("2015-04-30")
is.weekend("2015-04-31")
is.weekend("2015-05-01")
names(imputed)
sapply(imputed$date, FUN=function(x) {is.weekend(x)})
cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
imputed <- cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
names(imputed)
names(imputed)[4] <- "Weekend"
names(imputed)
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by (weekend, interval)")
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by weekend, interval")
head(avgStepsByIntervalPanel)
avgStepsByIntervalPanel = sqldf("select interval, weekend, avg(steps) as avg from imputed group by weekend, interval")
head(avgStepsByIntervalPanel, 100)
subset(avgStepsByIntervalPanel, interval=800)
subset(avgStepsByIntervalPanel, interval==800)
densityplot(~avg|Weekend, data=avgStepsByIntervalPanel
main="Main",
xlab="Some",
layout=c(1,2))
densityplot(~avg|Weekend, data=avgStepsByIntervalPanel
main="Main",
xlab="Some",
layout=c(1,2))
attach(avgStepsByIntervalPanel)
densityplot(~avg|Weekend,
main="Main",
xlab="Some",
layout=c(1,2))
library("lattice")
densityplot(~avg|Weekend,
main="Main",
xlab="Some",
layout=c(1,2))
xyplot(~avg|Weekend,
main="Main",
xlab="Some",
layout=c(1,2))
xyplot(avg|Weekend,
main="Main",
xlab="Some",
layout=c(1,2))
xyplot(~avg|Weekend,
main="Main",
xlab="Some",
layout=c(1,2))
x = avgStepsByIntervalPanel
max(x$avg)
names(x)
names(x)
xyplot(avg~interval|Weekend
+        main="Scatterplots by Cylinders and Gears",
+        ylab="Miles per Gallon", xlab="Car Weight")
xyplot(avg~interval|Weekend
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
xyplot(avg~interval|Weekend,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
xyplot(avg~interval|Weekend,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight", layout=c(1,2))
xyplot(avg~interval|Weekend,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight", layout=c(1,2), lty="l")
myts
head(myts,25)
head(avgStepsByInterval$avg,25)
head(myts,50)
head(avgStepsByInterval$avg,50)
xyplot(avg~interval|Weekend,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight", layout=c(1,2), lty="l")
xyplot(avg~interval|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval", xlab="Interval", layout=c(1,2), lty="l")
z <- cbind(avgStepsByIntervalPanel, avgStepsByInterval$interval/100) * 60 + avgStepsByInterval$interval %% 100
str(avgStepsByInterval$interval)
z <- cbind(avgStepsByIntervalPanel, avgStepsByIntervalPanel$interval/100) * 60 + avgStepsByIntervalPanel$interval %% 100
z <- cbind(avgStepsByIntervalPanel, avgStepsByIntervalPanel$interval/100 * 60 + avgStepsByIntervalPanel$interval %% 100
)
z
head(z)
avgStepsByIntervalPanel <- cbind(avgStepsByIntervalPanel, avgStepsByIntervalPanel$interval/100 * 60 + avgStepsByIntervalPanel$interval %% 100
)
names(avgStepsByIntervalPanel)
names(avgStepsByIntervalPanel)[4] = "minnumber""
names(avgStepsByIntervalPanel)]
""
]]""
""
[]
names(avgStepsByIntervalPanel)[4] = "minnumber"
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval", xlab="Interval", layout=c(1,2), lty="l")
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval", xlab="5 Min Interval starting at Minute", layout=c(1,2), lty="l")
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval", xlab="5 Min Interval starting at Minute", layout=c(1,2), type="l")
library(lattice)
imputed <- cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
names(imputed)[4] <- "Weekend"
avgStepsByIntervalPanel <- cbind(avgStepsByIntervalPanel,
avgStepsByIntervalPanel$interval/100 * 60 +
avgStepsByIntervalPanel$interval %% 100)
names(avgStepsByIntervalPanel)[5] = "minnumber"
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval",
xlab="5 Min Interval starting at Minute",
layout=c(1,2), type="l")
names(avgStepsByIntervalPanel)
rm(list=ls())
rm(list=ls());require("sqldf");set.seed(1776);setwd("c:\\users\\public\\proj1\\")
if (file.exists("./LocalCopyOfData.csv")) {
dataset <- read.table("./LocalCopyOfData.csv")
} else {
fileurl <- "http://d396qusza40orc.cloudfront.net/repdata/data/activity.zip"
temp <- tempfile()
download.file(fileurl, temp)
dataset <- read.table(unz(temp, "activity.csv"), sep=",",skip=0, header=TRUE)
unlink(temp)
write.table(dataset, "./LocalCopyOfData.csv")
}
toplines <- 3
mypretty = function (x) {sprintf("%6.1f", x)}
HHMM = function (x) {
sprintf("%d:%d HRS", floor(x/100), x %% 100)
}
head(dataset, toplines)
dim(dataset)
dailyTotalSteps <- sqldf("select date, sum(steps) from dataset group by date")
names(dailyTotalSteps) <- c("dataset", "TotSteps")
head(dailyTotalSteps, toplines)
avgSteps <- mypretty(sqldf("select avg(TotSteps) from dailyTotalSteps"))
hist(as.numeric(dailyTotalSteps$TotSteps), col="purple", breaks=25,
xlab="Step Range", ylab="Number of Days",
main = "Distribution of Total Daily Steps", yaxp=c(0,10,2))
avgStepsByInterval = sqldf("select interval, avg(steps) as avg from dataset group by interval")
maxavg = max(avgStepsByInterval[2])
result <- subset(avgStepsByInterval, avg==maxavg)
myts = ts(avgStepsByInterval$avg)
minnumber <- floor(dataset$interval/100) * 60 + dataset$interval %% 100
plot.ts(minnumber, myts, type="l",
xlab="Minute number (nth minute of the day)",
ylab="Average number of steps",
main="Time Series of Average Steps vs the Minute of the Day")
reportNAcount = function(dataset, col) {
cmd = sprintf("nrow(subset(%s, is.na(%s$%s)))", dataset, dataset, col); cmd
}
original <- dataset
imputed   <- dataset
large = 100000
distance = function(tbl, i, j) {
if ((i == j) | is.na(tbl[j,1])) {
large;
} else {
dist = abs(floor(tbl[i,3]/100) * 60 + tbl[i,3] %% 100 -
floor(tbl[j,3]/100) * 60 + tbl[j,3] %% 100);
if (tbl[i,2] != tbl[j,2]) {
dist = dist + 120;
}
dist
}
}
impute_hotdeck = function(imputed, original) {
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = i
for (j in 1:nrow(imputed)) {
if (runif)
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
}
}
imputed[i,1] = dist
}
}
}
library(lattice)
imputed <- cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
names(imputed)[4] <- "Weekend"
avgStepsByIntervalPanel <- cbind(avgStepsByIntervalPanel,
avgStepsByIntervalPanel$interval/100 * 60 +
avgStepsByIntervalPanel$interval %% 100)
names(avgStepsByIntervalPanel)[5] = "minnumber"
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval",
xlab="5 Min Interval starting at Minute",
layout=c(1,2), type="l")
savehistory("C:/Users/Public/proj1/.Rhistory1")
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by weekend, interval order by interval")
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by weekend, interval order by interval")
names(imputed)[4] <- "Weekend"
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by Weekend, interval order by interval")
rm(list=ls())
rm(list=ls());require("sqldf");set.seed(1776);setwd("c:\\users\\public\\proj1\\")
if (file.exists("./LocalCopyOfData.csv")) {
dataset <- read.table("./LocalCopyOfData.csv")
} else {
fileurl <- "http://d396qusza40orc.cloudfront.net/repdata/data/activity.zip"
temp <- tempfile()
download.file(fileurl, temp)
dataset <- read.table(unz(temp, "activity.csv"), sep=",",skip=0, header=TRUE)
unlink(temp)
write.table(dataset, "./LocalCopyOfData.csv")
}
toplines <- 3
mypretty = function (x) {sprintf("%6.1f", x)}
HHMM = function (x) {
sprintf("%d:%d HRS", floor(x/100), x %% 100)
}
head(dataset, toplines)
dim(dataset)
dailyTotalSteps <- sqldf("select date, sum(steps) from dataset group by date")
names(dailyTotalSteps) <- c("dataset", "TotSteps")
head(dailyTotalSteps, toplines)
avgSteps <- mypretty(sqldf("select avg(TotSteps) from dailyTotalSteps"))
hist(as.numeric(dailyTotalSteps$TotSteps), col="purple", breaks=25,
xlab="Step Range", ylab="Number of Days",
main = "Distribution of Total Daily Steps", yaxp=c(0,10,2))
avgStepsByInterval = sqldf("select interval, avg(steps) as avg from dataset group by interval")
maxavg = max(avgStepsByInterval[2])
result <- subset(avgStepsByInterval, avg==maxavg)
myts = ts(avgStepsByInterval$avg)
minnumber <- floor(dataset$interval/100) * 60 + dataset$interval %% 100
plot.ts(minnumber, myts, type="l",
xlab="Minute number (nth minute of the day)",
ylab="Average number of steps",
main="Time Series of Average Steps vs the Minute of the Day")
reportNAcount = function(dataset, col) {
cmd = sprintf("nrow(subset(%s, is.na(%s$%s)))", dataset, dataset, col); cmd
}
original <- dataset
imputed   <- dataset
large = 100000
distance = function(tbl, i, j) {
if ((i == j) | is.na(tbl[j,1])) {
large;
} else {
dist = abs(floor(tbl[i,3]/100) * 60 + tbl[i,3] %% 100 -
floor(tbl[j,3]/100) * 60 + tbl[j,3] %% 100);
if (tbl[i,2] != tbl[j,2]) {
dist = dist + 120;
}
dist
}
}
impute_hotdeck = function(imputed, original) {
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = large; ind = i
for (j in 1:nrow(imputed)) {
if (runif)
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
}
}
imputed[i,1] = dist
}
}
}
original <- dataset
if (file.exists("./ImputedData.csv")) {
imputed <- read.table("./ImputedData.csv")
} else {
imputed   <- dataset #will be modified
default = sqldf("select avg(steps) from dataset"); ind=0
for (i in 1:nrow(imputed)) {
if(is.na(imputed[i,1])) {
dist = 10000; ind = 1; imputed[i,1]=default;
for (j in 1:nrow(imputed)) {
if (runif(1) < .001) {
thisdist = distance(original, i, j)
if (dist > thisdist) {
dist = thisdist;
ind = j;
imputed[i,1] = original[j,1]
}
}
}
}
}
write.table(imputed, "./ImputedData.csv")
}
NAinImputed <- eval(parse(text=reportNAcount("imputed", "steps")))
NAinImputed
dailyTotalSteps1 <- sqldf("select date, sum(steps) from imputed group by date")
names(dailyTotalSteps1) <- c("date", "TotSteps")
head(dailyTotalSteps1, toplines)
hist(as.numeric(dailyTotalSteps1$TotSteps), col="blue", breaks=25,
xlab="Step Range", ylab="Number of Days",
main = "Distribution of Total Daily Steps in Imputed Data", yaxp=c(0,10,2))
names(imputed)
library(lattice)
imputed <- cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
names(imputed)[4] <- "Weekend"
is.weekend = function(yyyy_mm_dd) {
day <- weekdays(as.Date(yyyy_mm_dd))
if ((day == "Saturday") || (day == "Saturday")) {
"Weekend"
} else {
"weekday"
}
}
library(lattice)
imputed <- cbind(imputed, sapply(imputed$date, FUN=function(x) {is.weekend(x)}))
names(imputed)[4] <- "Weekend"
names(imputed)
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg from imputed group by Weekend, interval order by interval")
avgStepsByIntervalPanel <- cbind(avgStepsByIntervalPanel,
avgStepsByIntervalPanel$interval/100 * 60 +
avgStepsByIntervalPanel$interval %% 100)
names(avgStepsByIntervalPanel)
names(avgStepsByIntervalPanel)[3] = "minnumber"
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval",
xlab="5 Min Interval starting at Minute",
layout=c(1,2), type="l")
names(avgStepsByIntervalPanel)
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval",
xlab="5 Min Interval starting at Minute",
layout=c(1,2), type="l")
avgStepsByIntervalPanel = sqldf("select interval, avg(steps) as avg, Weekend from imputed group by Weekend, interval order by interval")
avgStepsByIntervalPanel <- cbind(avgStepsByIntervalPanel,
avgStepsByIntervalPanel$interval/100 * 60 +
avgStepsByIntervalPanel$interval %% 100)
names(avgStepsByIntervalPanel)[4] = "minnumber"
attach(avgStepsByIntervalPanel)
xyplot(avg~minnumber|Weekend,
main="Average Steps per Interval on Weekdays and Weekends",
ylab="Steps per Interval",
xlab="5 Min Interval starting at Minute",
layout=c(1,2), type="l")
24*60
24*12*2
plot(myts~mn, lty="1")
knitr::purl("Proj1Rep.Rmd")
source("./Proj1Rep.R")
knitr::purl("Proj1Rep.Rmd")
source("./Proj1Rep.R")
